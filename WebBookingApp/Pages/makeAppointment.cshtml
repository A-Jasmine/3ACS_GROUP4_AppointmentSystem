@page
@model WebBookingApp.Pages.makeAppointmentModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Make Appointment</title>
    <link rel="stylesheet" href="@Url.Content("~/css/makeAppointment.css")">
    <script src="https://kit.fontawesome.com/0cc051477a.js" crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/dashboardStudent.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
</head>
<body>
    <div class="sidebar">
        <div class="profile">
            <img id="profileImage"
                 src="/dashboardStudent?handler=ProfilePicture&t=@DateTime.Now.Ticks"
                 alt="Profile Picture"
                 onclick="openUploadModal()">
            <div class="profile-info">
                <h2>@Model.FirstName @Model.LastName</h2>

                @if (Model.Role == "Student"
                && !string.IsNullOrWhiteSpace(Model.StudentOrganizationName)
                && !string.IsNullOrWhiteSpace(Model.StudentOrgRole)
                && Model.StudentOrganizationName != "N/A"
                && Model.StudentOrgRole != "N/A")
                {
                    <h3>@Model.StudentOrganizationName.ToUpper() @Model.StudentOrgRole</h3>
                }
            </div>
        </div>


        <ul>
            <p class="menu-text">Menu</p>
            <li><a asp-page="/dashboardStudent"><i class="fas fa-tachometer-alt"></i> Home</a></li>
            <li><a asp-page="/BookedAppointments"><i class="fas fa-calendar-check"></i> Booked Appointments</a></li>
            <li><a asp-page="/makeAppointment"><i class="fas fa-plus-circle"></i> Make Appointment</a></li>

            @if (Model.UserBaseRole == "Alumni")
            {
                <li><a asp-page="/AlumniAppointments"><i class="fas fa-calendar-alt"></i> Manage Appointments</a></li>
                <li><a asp-page="/SetAvailabilityAlumni"><i class="fas fa-calendar-alt"></i> Set Availability</a></li>
            }
            else if (Model.Role == "StudentOrgMember" || (!string.IsNullOrEmpty(Model.StudentOrgRole) && Model.StudentOrgRole != "N/A"))
            {
                <li><a asp-page="/StudentOrgAppointments"><i class="fas fa-calendar-alt"></i> Manage Appointments</a></li>
                <li><a asp-page="/SetAvailabilityStudentOrg"><i class="fas fa-calendar-alt"></i> Set Availability</a></li>
            }
            
            <!-- Settings Menu Item -->
            @if (Model.Role == "Student" && string.IsNullOrEmpty(Model.StudentOrgRole))
            {
                <li><a asp-page="/StudentSettings"><i class="fas fa-cog"></i> Settings</a></li>
            }
            else if (Model.Role == "StudentOrgMember" || Model.Role == "StudentOrganizationMember" ||
            (!string.IsNullOrEmpty(Model.StudentOrgRole) && Model.StudentOrgRole != "N/A"))
            {
                <li><a asp-page="/OrgSettings"><i class="fas fa-cog"></i> Settings</a></li>
            }
            else if (Model.UserBaseRole == "Alumni")
            {
                <li><a asp-page="/AlumniSettings"><i class="fas fa-cog"></i> Settings</a></li>
            }
        </ul>


        <a href="#" class="logout" onclick="showLogoutModal()">
            <i class="fas fa-sign-out-alt"></i> Log out
        </a>
    </div>

    <div class="main-content">
        <h1>Book Appointment</h1>

        @if (TempData["Message"] != null)
        {
            <div class="alert alert-success">
                @TempData["Message"]
            </div>
        }
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-error">
                @TempData["Error"]
            </div>
        }

        <div class="professor-container">
            <div class="filter-wrapper">
                <div class="filter-container">
                    <select id="categoryFilter" class="form-select mb-3" onchange="filterCards()">
                        <option value="all">All</option>
                        <option value="faculty">Faculty</option>
                        <option value="studentOrg">Student Org</option>
                        <option value="alumni">Alumni</option>
                    </select>
                </div>
            </div>

            <div class="professor-list">

                @foreach (var prof in Model.Professors)
                {
                    <div class="professor-card" data-category="faculty">
                        <div class="professor-card-content">
                            @if (prof.Picture != null)
                            {
                                var base64Image = Convert.ToBase64String(prof.Picture);
                                <img src="data:image/jpeg;base64,@base64Image" alt="Professor Picture" class="professor-pic" />
                            }
                            else
                            {
                                <img src="/images/image.png" alt="Default Picture" class="professor-pic" />
                            }

                            <div class="professor-details">
                                <div class="professor-name">@prof.FirstName @prof.LastName</div>
                                <div class="professor-sub">@prof.Role</div>
                                <div class="availability-status @(prof.IsAvailable ? "available" : "unavailable")">
                                    @prof.AvailabilityStatus
                                </div>
                            </div>
                        </div>

                        <button class="book-btn @(prof.IsAvailable ? "" : "disabled")"
                        @(prof.IsAvailable ? "" : "disabled")
                                data-name="@prof.FirstName @prof.LastName"
                                data-id="@prof.ProfessorId"
                                data-category="faculty"
                                title="@prof.AvailabilityStatus">
                            Book
                        </button>

                    </div>
                }


                @foreach (var orgMember in Model.OrganizationMembers)
                {
                    <div class="professor-card" data-category="studentOrg">
                        <div class="professor-card-content">
                            @if (orgMember.Picture != null)
                            {
                                var base64Image = Convert.ToBase64String(orgMember.Picture);
                                <img src="data:image/jpeg;base64,@base64Image" alt="Organization Member Picture" class="professor-pic" />
                            }
                            else
                            {
                                <img src="/images/image.png" alt="Default Picture" class="professor-pic" />
                            }

                            <div class="professor-details">
                                <div class="professor-name">@orgMember.FirstName @orgMember.LastName</div>
                                <div class="professor-sub">@orgMember.Organization.ToUpper() @orgMember.OrgRole</div>
                                <div class="availability-status @(orgMember.IsAvailable ? "available" : "unavailable")">
                                    @orgMember.AvailabilityStatus
                                </div>
                            </div>
                        </div>

                        <button class="book-btn @(orgMember.IsAvailable ? "" : "disabled")"
                        @(orgMember.IsAvailable ? "" : "disabled")
                                data-name="@orgMember.FirstName @orgMember.LastName"
                                data-id="@orgMember.StudentId"
                                data-category="studentOrg"
                                title="@orgMember.AvailabilityStatus">
                            Book
                        </button>
                    </div>
                }


                @foreach (var alumni in Model.Alumni)
                {
                    <div class="professor-card" data-category="alumni">
                        <div class="professor-card-content">
                            @if (alumni.Picture != null)
                            {
                                var base64Image = Convert.ToBase64String(alumni.Picture);
                                <img src="data:image/jpeg;base64,@base64Image" alt="Alumni Picture" class="professor-pic" />
                            }
                            else
                            {
                                <img src="/images/image.png" alt="Default Picture" class="professor-pic" />
                            }

                            <div class="professor-details">
                                <div class="professor-name">@alumni.FirstName @alumni.LastName</div>
                                <div class="professor-sub">Alumni</div>
                                <div class="availability-status @(alumni.IsAvailable ? "available" : "unavailable")">
                                    @alumni.AvailabilityStatus
                                </div>
                            </div>
                        </div>

                        <button class="book-btn @(alumni.IsAvailable ? "" : "disabled")"
                        @(alumni.IsAvailable ? "" : "disabled")
                                data-name="@alumni.FirstName @alumni.LastName"
                                data-id="@alumni.AlumniId"
                                data-category="alumni"
                                title="@alumni.AvailabilityStatus">
                            Book
                        </button>
                    </div>
                }



            </div>
        </div>
    </div>

    <!-- BOOK Modal -->
    <div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="bookingModalLabel">Book Appointment</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form method="post" asp-page-handler="BookAppointment">
                        <div class="d-flex align-items-center mb-3">
                            <span style="font-weight:600;">Appointment for&nbsp;</span>
                            <p id="professorName" style="font-weight:600; color:#e60000; margin:0;"></p>
                        </div>

                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="appointmentDate" class="form-label">Select Date</label>
                                <input asp-for="AppointmentDate" class="form-control" id="appointmentDate" name="AppointmentDate" required />
                                <div id="dateAvailabilityNote"></div>
                            </div>

                            <div class="col-md-6">
                                <label for="appointmentTime" class="form-label">Select Time Slot</label>
                                <select asp-for="AppointmentTime" class="form-select" id="appointmentTime" name="AppointmentTime" required>
                                    <option value="" selected disabled>Select a time slot</option>
                                </select>
                            </div>

                            <div class="col-md-6">
                                <label for="Purpose" class="form-label">Reason for Booking</label>
                                <select asp-for="Purpose" class="form-select" id="reason" name="Purpose" required>
                                    <option value="" selected disabled>Select Reason</option>
                                    <option value="Consultation">Consultation</option>
                                    <option value="Project Discussion">Project Discussion</option>
                                    <option value="Grades Inquiry">Grades Inquiry</option>
                                    <option value="Thesis Advising">Thesis Advising</option>
                                    <option value="Others">Others</option>
                                </select>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Mode</label>
                                <select class="form-select" name="Mode" asp-for="Mode" required>
                                    <option value="" selected disabled>Select Option</option>
                                    <option value="Face-to-Face">Face-to-Face</option>
                                    <option value="Online">Online</option>
                                </select>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Year & Section</label>
                                <input type="text" class="form-control" name="YearSection" asp-for="YearSection" placeholder="Year & Section" required />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Additional Notes</label>
                                <textarea asp-for="AdditionalNotes" class="form-control" rows="3" placeholder="Enter your message here..."></textarea>
                            </div>
                        </div>

                        <input type="hidden" asp-for="Role" value="@Model.Role" />
                        <input type="hidden" asp-for="UserBaseRole" />
                        <input type="hidden" id="professorId" asp-for="SelectedProfessorId" />
                        <input type="hidden" id="selectedAlumniId" asp-for="SelectedAlumniId" />
                        <input type="hidden" id="organizationMemberId" asp-for="SelectedOrganizationMemberId" />

                        <div class="text-center mt-4">
                            <button type="submit" class="btn btn-danger">Submit Appointment</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div id="logoutModal" class="modal">
        <div class="modal-content">
            <h2>Logout Confirmation</h2>
            <p>Are you sure you want to log out?</p>
            <div class="modal-buttons">
                <button class="logout-btn" onclick="confirmLogout()">Yes</button>
                <button class="cancel-btn" onclick="hideLogoutModal()">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Serialize professors and alumni data for JavaScript use
            var allProfessors = @Html.Raw(Json.Serialize(Model.Professors.Select(p => new
            {
                ProfessorId = p.ProfessorId,
                FirstName = p.FirstName,
                LastName = p.LastName,
                Picture = p.Picture,
                IsAvailable = p.IsAvailable,
                AvailabilityStatus = p.AvailabilityStatus,
                AvailableSlots = p.AvailableSlots,
                HasSpecificDates = p.HasSpecificDates
            })));

            var allAlumni = @Html.Raw(Json.Serialize(Model.Alumni.Select(a => new
            {
                AlumniId = a.AlumniId,
                FirstName = a.FirstName,
                LastName = a.LastName,
                Picture = a.Picture,
                IsAvailable = a.IsAvailable,
                AvailabilityStatus = a.AvailabilityStatus,
                AvailableSlots = a.AvailableSlots,
                HasSpecificDates = a.HasSpecificDates,
                Capacity = a.Capacity
            })));

            var allOrgMembers = @Html.Raw(Json.Serialize(Model.OrganizationMembers.Select(m => new
            {
                StudentId = m.StudentId,
                FirstName = m.FirstName,
                LastName = m.LastName,
                Picture = m.Picture,
                IsAvailable = m.IsAvailable,
                AvailabilityStatus = m.AvailabilityStatus,
                AvailableSlots = m.AvailableSlots,
                HasSpecificDates = m.HasSpecificDates,
                Capacity = m.Capacity,
                OrganizationId = m.OrganizationId
            })));

            // Add event listeners to all book buttons
            document.querySelectorAll('.book-btn:not(.disabled)').forEach(button => {
                button.addEventListener('click', function() {
                    const name = this.dataset.name;
                    const id = this.dataset.id;
                    const category = this.dataset.category;
                    openBookingModal(name, id, category);
                });
            });

            function filterCards() {
                const filterValue = document.getElementById('categoryFilter').value;
                const cards = document.querySelectorAll('.professor-card');

                cards.forEach(card => {
                    if (filterValue === 'all' || card.getAttribute('data-category') === filterValue) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }

            function openBookingModal(name, id, category) {
                console.log("Opening booking modal for:", name, id, category);

                // Reset all ID fields first
                document.getElementById("professorId").value = '';
                document.getElementById("selectedAlumniId").value = '';
                document.getElementById("organizationMemberId").value = '';

                // Set the appropriate name display
                document.getElementById("professorName").innerText = name;

                // Clear previous date availability note
                const dateNoteContainer = document.getElementById('dateAvailabilityNote');
                dateNoteContainer.innerHTML = '';

                // Clear the time slot dropdown
                const timeSelect = document.getElementById("appointmentTime");
                timeSelect.innerHTML = '<option value="" selected disabled>Select a time slot</option>';

                // Initialize Flatpickr with common configuration
                const dateInput = document.getElementById("appointmentDate");
                if (dateInput._flatpickr) {
                    dateInput._flatpickr.destroy();
                }

                const fpConfig = {
                    minDate: "today",
                    dateFormat: "Y-m-d",
                    disableMobile: true,
                    onChange: function(selectedDates, dateStr) {
                        updateTimeSlots(dateStr, id, category);
                    }
                };

                let person;
                if (category === 'faculty') {
                    document.getElementById("professorId").value = id;
                    person = allProfessors.find(p => p.professorId == id);
                }
                else if (category === 'alumni') {
                    document.getElementById("selectedAlumniId").value = id;
                    person = allAlumni.find(a => a.alumniId == id);
                }
                else if (category === 'studentOrg') {
                    document.getElementById("organizationMemberId").value = id;
                    person = allOrgMembers.find(m => m.studentId == id);
                }

                if (person && person.hasSpecificDates && person.availableSlots?.length > 0) {
                    // Get unique available dates from slots
                    const enabledDates = [...new Set(
                        person.availableSlots
                            .map(s => s.date ? new Date(s.date) : null)
                            .filter(d => d && !isNaN(d))
                    )];

                    if (enabledDates.length > 0) {
                        fpConfig.enable = enabledDates;
                        const dateNote = document.createElement('small');
                        dateNote.className = 'text-muted d-block mt-1';

                        // Count unique dates using Set to eliminate duplicates
                        const uniqueDates = new Set(
                            person.availableSlots
                                .filter(slot => slot.date)
                                .map(slot => new Date(slot.date).toDateString())
                        ).size;

                        dateNote.textContent = `Available on ${uniqueDates} specific date(s)`;
                        dateNoteContainer.appendChild(dateNote);
                    }
                }

                // Initialize Flatpickr with the configured options
                flatpickr("#appointmentDate", fpConfig);

                var bookingModal = new bootstrap.Modal(document.getElementById('bookingModal'));
                bookingModal.show();
            }

            function updateTimeSlots(selectedDate, id, category = 'faculty') {
                console.log(`Updating time slots for date: ${selectedDate}, ID: ${id}, Category: ${category}`);
                const timeSelect = document.getElementById("appointmentTime");
                timeSelect.innerHTML = '<option value="" selected disabled>Select a time slot</option>';

                let person;
                if (category === 'faculty') {
                    person = allProfessors.find(p => p.professorId == id);
                } else if (category === 'alumni') {
                    person = allAlumni.find(a => a.alumniId == id);
                } else if (category === 'studentOrg') {
                    person = allOrgMembers.find(m => m.studentId == id);
                }

                if (!person || !person.availableSlots || person.availableSlots.length === 0) {
                    const option = document.createElement("option");
                    option.value = "";
                    option.textContent = "No available time slots";
                    option.disabled = true;
                    timeSelect.appendChild(option);
                    return;
                }

                // Filter slots for the selected date
                const selectedDateObj = new Date(selectedDate);
                const slotsForDate = person.availableSlots.filter(slot => {
                    if (!slot.date) return true; // General availability
                    const slotDate = new Date(slot.date);
                    return slotDate.toDateString() === selectedDateObj.toDateString();
                });

                if (slotsForDate.length === 0) {
                    const option = document.createElement("option");
                    option.value = "";
                    option.textContent = "No available time slots for selected date";
                    option.disabled = true;
                    timeSelect.appendChild(option);
                    return;
                }

                // Add the available time slots
                slotsForDate.forEach(slot => {
                    const option = document.createElement("option");
                    option.value = slot.startTime;
                    option.textContent = slot.timeRange || `${slot.startTime} - ${slot.endTime}`;
                    timeSelect.appendChild(option);
                });
            }

            function showLogoutModal() {
                document.getElementById('logoutModal').style.display = 'block';
            }

            function hideLogoutModal() {
                document.getElementById('logoutModal').style.display = 'none';
            }

            function confirmLogout() {
                window.location.href = '/Login';
            }
        });
    </script>
</body>
</html>